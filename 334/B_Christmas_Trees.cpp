#include <bits/stdc++.h>
using namespace std;

// LとRとMをとって、L・RをMで割り切り捨てる関数
int64_t f(int64_t R, int64_t M) {
  return R / M;
}

// 工夫は3点
// Aを0にする（L,Rも合わせる）
// LとRを両方とも正の数にする
// 0~Rまでの本数から0~L-1までの本数(Mで割って切り捨て）を引いてL~R間の本数を求める
int main() {
  int64_t A, M, L, R;
  cin >> A >> M >> L >> R;

  // Aを0とするためにLとRからAだけ引く
  L -= A;
  R -= A;

  // LとRは両方正であるほうが計算しやすい
  // L <= RなのでAを引いた分Lが負になる可能性がある
  // 両方とも正になるように調整する
  if (L < 0) {
    // Lが負の時、Lに-1をかけて正にする
    // 正にしたLをMで割ったものに1を足したものをXとする
    // Lに下駄を履かせて正にしたいのでLよりも大きな数をMとの掛け算で算出したいため
    int64_t X = -L / M + 1;

    // XにMをかけたものをL、Rに加える
    // Mの倍数だけ下駄をはかせて正にする
    L += X * M;
    R += X * M;
  }

  // RとL-1をMで割って切り捨てたものの差をとる
  // 割り算して切り捨てる関数f()を定義しておくと便利
  int64_t ans = f(R, M) - f(L - 1, M);

  cout << ans << endl;
  return 0;
}